#+title: Joptimiser
#+options: \n:t

# J Optimiser

Main motivation for what is written below is to keep things extremely simple whilst also solving the problem.

The simplest optimiser I could come up with to solve the most common optimisation problems I face:
- Given a range of options
- Given a non-trivial problem to solve
- Which options to choose? And how many of each option to chooses?

Below uses a simple example to illustrate the usefulness of the proposed algorithm.
But in doing so I hope you can gain an intuition for the benefits of this approach in solving conceptually identical but less simple problems.

*** Options (xo)
#+begin_src J :session :results value :exports both
]<xo=:(3 3) $ 2 0 0 1 1 0 1 0 1
#+end_src

#+RESULTS:
: ┌─────┐
: │2 0 0│
: │1 1 0│
: │1 0 1│
: └─────┘

Each row is a unique option and each column a distinct product category e.g. snacks or mince 90cl for example. The first option means you can have 2 units of A, option 2 means 1 unit of A and B and option 3 is 1 unit of options A and C.

*** Problem (xp)
Here we assume to know how many units of each of A,B and C we are to solve for: xp.

#+begin_src J :session :results value :exports both
]xp=:4 2 2
#+end_src

#+RESULTS:
: 4 2 2

Most important is that xo can map to xp.
In this case rows of xo can be chosen and stacked up, with their column sums solving for each atom of xp.

*** Starting point (xt)
We need a starting point. Which can be either uninformative or informative.
In this example we opt for the uninformative approach: A frame of zero's to store our solution.

#+begin_src J :session :results value :exports both
]<xt0=:(4,3) $ 0 NB. start with all zeros
xt=:xt0
#+end_src

#+RESULTS:
: ┌─────┐
: │0 0 0│
: │0 0 0│
: │0 0 0│
: │0 0 0│
: └─────┘

*** Weights (wdf & wde)
Now come weights. They do not need to be different but to keep this interesting and realistic we will apply different weights.

#+begin_src J :session :results value :exports both
]<wdf=:10 1 1 NB. demand fill weights
]<wde=:_10 _0.5 _0.5 NB. demand exceeded weights
#+end_src

#+RESULTS:
: ┌──────┐
: │10 1 1│
: └──────┘
:
: ┌─────────────┐
: │_10 _0.5 _0.5│
: └─────────────┘

wdf = weight (to multiply) for each unit of demand filled. Product group A wdf being +10 compare with +1 for the other 2 options, making option A very attractive.

wde = weight (to multiply) each unit of demand exceeded. Product group A being -10 compared with -1 for the other 2 options, making option A very unattractive to over-produce.

*** Evaluation

We need a way to evaluate between candidate choices and each time pick the best candidate.

#+begin_src J :session :results value :exports both
eval=:3 : 0
csy=.+/"2 y
df=. xp <. csy
de=.0 >. csy-df
+/ (de*wde), (df*wdf)
)
eval (4,3) $ 1 1 0 1 1 0 0 0 0 0 0 0
#+end_src

#+RESULTS:
: 22

In the test case above 2,2,0 units (respectively) we filled for option A,B and C respectively leading to no excess so 2*20+2*1=22 being the evaluation metric.

*** Find best solve (xb)

#+begin_src J :session :results value :exports both
bs=:3 : '(}:xt) ,~ xo{~ (] i. >./) {{eval y, }: xt}}"1 xo' NB. best solve finder
solver=: 3 : 0
xt=:bs 1
eval xt
)
solver 1
xt
#+end_src

#+RESULTS:
: 20
:
: 2 0 0
: 0 0 0
: 0 0 0
: 0 0 0

No surprise here the above prefer option A because each unit makes 10 instead of 1, which is the case for options B and C.

*** Continuous improvement

#+begin_src J :session :results value :exports both
xt=:xt0
solver"0 i.4
<xt
xp - +/"2 xt
#+end_src

#+RESULTS:
#+begin_example
20 40 31 22

┌─────┐
│1 1 0│
│1 1 0│
│2 0 0│
│2 0 0│
└─────┘

_2 0 2
#+end_example

We can see the 1st try it evals at 22 with 2 units excess and 2 kg under demand.

#+begin_src J :session :results value :exports both
NB. second try:
solver"0 i.4
<xt
xp - +/"2 xt
#+end_src

#+RESULTS:
#+begin_example
33 44 44 44

┌─────┐
│1 1 0│
│1 1 0│
│1 0 1│
│1 0 1│
└─────┘

0 0 0
#+end_example

2nd attempt it evals at 44 (which is 2x the first try) whilst meeting demand exactly, no units produced exceed or under-supply demand for any category.

*** Conclusion

Using only array data stuctures and solving multiple times solves our problem whilst keeping things simple.
